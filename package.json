{
  "name": "anything-llm",
  "version": "0.2.0",
  "description": "The best solution for turning private documents into a chat bot using off-the-shelf tools and commercially viable AI technologies.",
  "main": "index.js",
  "type": "module",
  "author": "Timothy Carambat (Mintplex Labs)",
  "license": "MIT",
  "engines": {
    "node": ">=18"
  },
  "scripts": {
    "lint": "cd server && pnpm lint && cd ../frontend && pnpm run lint && cd ../collector && pnpm run lint",
    "setup": "cd server && pnpm i && cd ../collector && pnpm i && cd ../frontend && pnpm i && cd .. && pnpm run setup:envs && pnpm run prisma:setup && echo \"Please run pnpm run dev:server, pnpm  run dev:collector, and pnpm run dev:frontend in separate terminal tabs.\"",
    "setup:envs": "cp -n ./frontend/.env.example ./frontend/.env && cp -n ./server/.env.example ./server/.env.development && cp -n ./collector/.env.example ./collector/.env && cp -n ./docker/.env.example ./docker/.env && echo \"All ENV files copied!\n\"",
    "dev:server": "cd server && pnpm dev",
    "dev:collector": "cd collector && pnpm dev",
    "dev:frontend": "cd frontend && pnpm dev",
    "prisma:generate": "cd server && npx prisma generate",
    "prisma:migrate": "cd server && npx prisma migrate dev --name init",
    "prisma:seed": "cd server && npx prisma db seed",
    "prisma:setup": "pnpm run prisma:generate && pnpm run prisma:migrate && pnpm run prisma:seed",
    "prisma:reset": "truncate -s 0 server/storage/anythingllm.db && pnpm run prisma:migrate",
    "prod:server": "cd server && pnpm run start",
    "prod:frontend": "cd frontend && pnpm run build",
    "generate:cloudformation": "node cloud-deployments/aws/cloudformation/generate.mjs",
    "generate::gcp_deployment": "node cloud-deployments/gcp/deployment/generate.mjs",
    "verify:translations": "cd frontend/src/locales && node verifyTranslations.mjs",
    "docker:build-prod": "cd docker && sh ./build.sh prod",
    "docker:build": "cd docker && sh ./build.sh dev",
    "docker:stop": "cd docker && docker-compose down",
    "docker:logs": "cd docker && docker-compose logs -f",
    "docker:start": "cd docker && sh ./start.sh",
    "dev:all": "npx concurrently \"pnpm run dev:server\" \"pnpm run dev:collector\" \"pnpm run dev:frontend\""
  },
  "private": false,
  "devDependencies": {
    "concurrently": "^9.1.2"
  }
}